(module "pandoc"
  (export
    `("get-readers" ,readers)
    `("get-writers" ,writers)
    `("convert"     ,convert)
    `("get-formats" ,formats)
    `("write"       ,_write))

  (loads "pandoc/priv/Pandoc" "pandoc/priv/req")

  (MATCHERS
    #{"md"       #{:ext "markdown"  :binary #f}
      "tex"      #{:ext "latex"     :binary #f}
      "html"     #{:ext "html"      :binary #f}
      "json"     #{:ext "json"      :binary #f}
      "org"      #{:ext "org"       :binary #f}
      "tei"      #{:ext "tei"       :binary #f}
      "t2t"      #{:ext "t2t"       :binary #t}
      "docx"     #{:ext "docx"      :binary #t}
      "odt"      #{:ext "odt"       :binary #t}
      "epub"     #{:ext "epub"      :binary #t}
      "groff"    #{:ext "man"       :binary #f}
      "rst"      #{:ext "rst"       :binary #f}
      "rtf"      #{:ext "rtf"       :binary #f}
      "txt"      #{:ext "plain"     :binary #f}
      "asciidoc" #{:ext "asciidoc"  :binary #f}
      "adoc"     #{:ext "asciidoc"  :binary #f}
      "wiki"     #{:ext "mediawiki" :binary #f}
      "lhs"      #{:ext "haddock"   :binary #f}})

  (formats (lambda ()
    "get all available pandoc formats (read and write).

     complexity: O(n)
     returns: a list of strings"
    (set:get-elems (set:set (++ (readers) (writers)) :container-type '[]))))

  (filetype (lambda (filename)
    (let ((extension (list:last (string:split filename #\.))))
      (if (in? MATCHERS extension)
        (MATCHERS extension)
        (error:from-string (++ "Unknown file type: " extension))))))

  (_write (lambda (from to)
    "converts based on an input and output file. Does file extension
     matching.

     params:
       - from: input file
       - to: output file
     complexity: varies based on formats
     returns: nil"
    (let* ((fft    (filetype from))
           (inpt   ((if (fft :binary) read-binary-contents read-contents)
                      from))
           (writer (curry write (convert (fft :ext)
                                         ((filetype to) :ext)
                                         inpt))))
      (with-output-file to writer)))))
